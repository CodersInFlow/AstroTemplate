---
export const prerender = false;

import '../../../../styles/global.css';
import Layout from '../../../../layouts/Layout.astro';

// Check authentication
const token = Astro.cookies.get('auth-token');
if (!token) {
  return Astro.redirect('/blog/editor/login');
}

// Check if user is admin
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8752';
const userResponse = await fetch(`${API_URL}/api/auth/me`, {
  headers: {
    'Cookie': `auth-token=${token.value}`
  }
});

if (!userResponse.ok) {
  // Clear invalid token to prevent redirect loop
  Astro.cookies.delete('auth-token', {
    path: '/' ,
    httpOnly: true,
    secure: true,
    sameSite: 'lax'
  });
  return Astro.redirect('/blog/editor/login');
}

const currentUser = await userResponse.json();
if (currentUser.role !== 'admin') {
  return Astro.redirect('/blog/editor');
}

// Fetch all users
const usersResponse = await fetch(`${API_URL}/api/admin/users`, {
  headers: {
    'Cookie': `auth-token=${token.value}`
  }
});
const users = usersResponse.ok ? await usersResponse.json() : [];

// Separate by status
const approvedUsers = users.filter((u: any) => u.approved);
const pendingUsers = users.filter((u: any) => !u.approved);
---

<Layout title="User Management - Editor">
  <div class="min-h-screen bg-gray-900">
    <!-- Editor Header -->
    <header class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4 py-4">
        <div class="flex justify-between items-center">
          <h1 class="text-xl font-bold text-white">User Management</h1>
          <div class="flex items-center gap-4">
            <a href="/blog/editor/users/new" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition">
              Create User
            </a>
            <a href="/blog/editor" class="text-gray-400 hover:text-white">
              ‚Üê Back to Dashboard
            </a>
          </div>
        </div>
      </div>
    </header>

    <!-- Editor Navigation -->
    <nav class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4">
        <div class="flex gap-6">
          <a href="/blog/editor" class="py-3 border-b-2 border-transparent text-gray-400 hover:text-gray-300">Dashboard</a>
          <a href="/blog/editor/posts" class="py-3 border-b-2 border-transparent text-gray-400 hover:text-gray-300">Posts</a>
          <a href="/blog/editor/categories" class="py-3 border-b-2 border-transparent text-gray-400 hover:text-gray-300">Categories</a>
          <a href="/blog/editor/users" class="py-3 border-b-2 border-blue-500 text-blue-400">Users</a>
        </div>
      </div>
    </nav>

    <main class="container mx-auto px-4 py-8 max-w-6xl">
      <!-- Pending Approvals -->
      {pendingUsers.length > 0 && (
        <section class="mb-8">
          <h2 class="text-2xl font-bold mb-4 text-yellow-400">Pending Approvals ({pendingUsers.length})</h2>
          <div class="bg-yellow-900/20 border border-yellow-700 rounded-lg overflow-hidden">
            <table class="w-full">
              <thead class="bg-yellow-900/30">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Name</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Email</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Registered</th>
                  <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-yellow-800">
                {pendingUsers.map((user: any) => (
                  <tr>
                    <td class="px-6 py-4 text-white">{user.name}</td>
                    <td class="px-6 py-4 text-gray-300">{user.email}</td>
                    <td class="px-6 py-4 text-gray-400">
                      {new Date(user.createdAt).toLocaleDateString()}
                    </td>
                    <td class="px-6 py-4 text-right">
                      <button
                        data-user-id={user.id}
                        data-user-name={user.name}
                        class="approve-btn px-3 py-1 bg-green-600 hover:bg-green-700 rounded text-sm mr-2"
                      >
                        Approve
                      </button>
                      <button
                        data-user-id={user.id}
                        data-user-name={user.name}
                        class="reject-btn px-3 py-1 bg-red-600 hover:bg-red-700 rounded text-sm"
                      >
                        Reject
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </section>
      )}

      <!-- Approved Users -->
      <section>
        <h2 class="text-2xl font-bold mb-4 text-white">Active Users ({approvedUsers.length})</h2>
        <div class="bg-gray-800 rounded-lg overflow-hidden">
          <table class="w-full">
            <thead class="bg-gray-700">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Name</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Email</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Role</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Registered</th>
                <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-700">
              {approvedUsers.map((user: any) => (
                <tr>
                  <td class="px-6 py-4">
                    <a href={`/blog/editor/users/edit/${user.id}`} class="text-blue-400 hover:text-blue-300">
                      {user.name}
                    </a>
                    {user.id === currentUser.id && (
                      <span class="ml-2 text-xs text-gray-400">(You)</span>
                    )}
                  </td>
                  <td class="px-6 py-4 text-gray-300">{user.email}</td>
                  <td class="px-6 py-4">
                    <span class={`px-2 py-1 text-xs rounded-full ${
                      user.role === 'admin' ? 'bg-purple-900 text-purple-300' : 'bg-gray-700 text-gray-300'
                    }`}>
                      {user.role}
                    </span>
                  </td>
                  <td class="px-6 py-4 text-gray-400">
                    {new Date(user.createdAt).toLocaleDateString()}
                  </td>
                  <td class="px-6 py-4 text-right">
                    {user.id !== currentUser.id && (
                      <select
                        data-user-id={user.id}
                        data-user-name={user.name}
                        class="role-select px-3 py-1 bg-gray-700 rounded text-sm"
                      >
                        <option value="" disabled selected>Change role</option>
                        <option value="admin" disabled={user.role === 'admin'}>Make Admin</option>
                        <option value="user" disabled={user.role === 'user'}>Make User</option>
                      </select>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </section>

      {users.length === 0 && (
        <div class="text-center py-12 text-gray-400">
          <p>No users found.</p>
        </div>
      )}
    </main>
  </div>
</Layout>

<script>
  // Handle approve buttons
  document.querySelectorAll('.approve-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const button = e.currentTarget as HTMLElement;
      const userId = button.dataset.userId;
      const userName = button.dataset.userName;
      
      if (!userId) return;
      
      if (confirm(`Approve ${userName}?`)) {
        try {
          const response = await fetch(`${import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8752'}/api/admin/users/${userId}/approve`, {
            method: 'PUT',
            credentials: 'include',
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Failed to approve user');
          }
        } catch (error) {
          alert('Network error. Please try again.');
        }
      }
    });
  });

  // Handle reject buttons (delete user)
  document.querySelectorAll('.reject-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const button = e.currentTarget as HTMLElement;
      const userId = button.dataset.userId;
      const userName = button.dataset.userName;
      
      if (!userId) return;
      
      if (confirm(`Reject and delete ${userName}? This cannot be undone.`)) {
        try {
          const res = await fetch(`${API_URL}/api/admin/users/${userId}`, {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });

          if (res.ok) {
            alert('User deleted successfully');
            location.reload();
          } else {
            const error = await res.text();
            alert(`Failed to delete user: ${error}`);
          }
        } catch (error) {
          alert('Network error while deleting user');
        }
      }
    });
  });

  // Handle role changes
  document.querySelectorAll('.role-select').forEach(select => {
    select.addEventListener('change', async (e) => {
      const selectElement = e.currentTarget as HTMLSelectElement;
      const userId = selectElement.dataset.userId;
      const userName = selectElement.dataset.userName;
      const newRole = selectElement.value;
      
      if (!userId || !newRole) return;
      
      if (confirm(`Change ${userName}'s role to ${newRole}?`)) {
        try {
          const response = await fetch(`${import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8752'}/api/admin/users/${userId}/role`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify({ role: newRole })
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Failed to update user role');
          }
        } catch (error) {
          alert('Network error. Please try again.');
        }
      }
      
      // Reset select if cancelled
      selectElement.value = '';
    });
  });
</script>