---
export const prerender = false;

import '../../../../styles/global.css';
import Layout from '../../../../layouts/Layout.astro';

// Check authentication
const token = Astro.cookies.get('auth-token');
if (!token) {
  return Astro.redirect('/blog/editor/login');
}

// Check if user is admin
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8752';
const userResponse = await fetch(`${API_URL}/api/auth/me`, {
  headers: {
    'Cookie': `auth-token=${token.value}`
  }
});

if (!userResponse.ok) {
  // Clear invalid token to prevent redirect loop
  Astro.cookies.delete('auth-token', {
    path: '/' ,
    httpOnly: true,
    secure: true,
    sameSite: 'lax'
  });
  return Astro.redirect('/blog/editor/login');
}

const user = await userResponse.json();
if (user.role !== 'admin') {
  return Astro.redirect('/blog/editor');
}

// Fetch categories
const categoriesResponse = await fetch(`${API_URL}/api/categories`, {
  headers: {
    'Cookie': `auth-token=${token.value}`
  }
});
const categories = categoriesResponse.ok ? await categoriesResponse.json() : [];

// Separate by type
const blogCategories = categories.filter((c: any) => c.type === 'blog');
const docsCategories = categories.filter((c: any) => c.type === 'docs');
---

<Layout title="Categories - Editor">
  <div class="min-h-screen bg-gray-900">
    <!-- Editor Header -->
    <header class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4 py-4">
        <div class="flex justify-between items-center">
          <h1 class="text-xl font-bold text-white">Manage Categories</h1>
          <a href="/blog/editor" class="text-gray-400 hover:text-white">
            ‚Üê Back to Dashboard
          </a>
        </div>
      </div>
    </header>

    <!-- Editor Navigation -->
    <nav class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4">
        <div class="flex gap-6">
          <a href="/blog/editor" class="py-3 border-b-2 border-transparent text-gray-400 hover:text-gray-300">Dashboard</a>
          <a href="/blog/editor/posts" class="py-3 border-b-2 border-transparent text-gray-400 hover:text-gray-300">Posts</a>
          <a href="/blog/editor/categories" class="py-3 border-b-2 border-blue-500 text-blue-400">Categories</a>
          {user.role === 'admin' && (
            <a href="/blog/editor/users" class="py-3 border-b-2 border-transparent text-gray-400 hover:text-gray-300">Users</a>
          )}
        </div>
      </div>
    </nav>

    <main class="container mx-auto px-4 py-8 max-w-4xl">
      <!-- Create New Category -->
      <section class="mb-8">
        <h2 class="text-2xl font-bold mb-4 text-white">Create New Category</h2>
        <form id="categoryForm" class="bg-gray-800 rounded-lg p-6 space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="name" class="block text-sm font-medium mb-2 text-gray-300">Category Name</label>
              <input
                type="text"
                id="name"
                name="name"
                required
                class="w-full px-3 py-2 bg-gray-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="e.g., Tutorial"
              />
            </div>
            <div>
              <label for="type" class="block text-sm font-medium mb-2 text-gray-300">Type</label>
              <select
                id="type"
                name="type"
                required
                class="w-full px-3 py-2 bg-gray-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="blog">Blog</option>
                <option value="docs">Documentation</option>
              </select>
            </div>
          </div>
          <button
            type="submit"
            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-md font-medium text-white transition-colors"
          >
            Create Category
          </button>
          <div id="error" class="text-red-400 hidden"></div>
          <div id="success" class="text-green-400 hidden"></div>
        </form>
      </section>

      <!-- Blog Categories -->
      <section class="mb-8">
        <h2 class="text-2xl font-bold mb-4 text-white">Blog Categories ({blogCategories.length})</h2>
        <div class="space-y-2">
          {blogCategories.map((category: any) => (
            <div class="bg-gray-800 rounded-lg p-4 flex justify-between items-center">
              <div>
                <h3 class="font-medium text-white">{category.name}</h3>
                <p class="text-sm text-gray-400">Slug: {category.slug}</p>
              </div>
              <button
                data-category-id={category.id}
                data-category-name={category.name}
                class="delete-btn text-red-400 hover:text-red-300 p-2"
                title="Delete category"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </div>
          ))}
          {blogCategories.length === 0 && (
            <p class="text-gray-400">No blog categories yet.</p>
          )}
        </div>
      </section>

      <!-- Documentation Categories -->
      <section>
        <h2 class="text-2xl font-bold mb-4 text-white">Documentation Categories ({docsCategories.length})</h2>
        <div class="space-y-2">
          {docsCategories.map((category: any) => (
            <div class="bg-gray-800 rounded-lg p-4 flex justify-between items-center">
              <div>
                <h3 class="font-medium text-white">{category.name}</h3>
                <p class="text-sm text-gray-400">Slug: {category.slug}</p>
              </div>
              <button
                data-category-id={category.id}
                data-category-name={category.name}
                class="delete-btn text-red-400 hover:text-red-300 p-2"
                title="Delete category"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </div>
          ))}
          {docsCategories.length === 0 && (
            <p class="text-gray-400">No documentation categories yet.</p>
          )}
        </div>
      </section>
    </main>
  </div>
</Layout>

<script>
  const form = document.getElementById('categoryForm') as HTMLFormElement;
  const errorDiv = document.getElementById('error') as HTMLDivElement;
  const successDiv = document.getElementById('success') as HTMLDivElement;
  
  // Handle form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    errorDiv.classList.add('hidden');
    successDiv.classList.add('hidden');
    
    const formData = new FormData(form);
    const data = {
      name: formData.get('name'),
      type: formData.get('type')
    };
    
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8752'}/api/categories`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        successDiv.textContent = 'Category created successfully!';
        successDiv.classList.remove('hidden');
        form.reset();
        // Reload page after delay
        setTimeout(() => window.location.reload(), 1500);
      } else {
        const text = await response.text();
        errorDiv.textContent = text || 'Failed to create category';
        errorDiv.classList.remove('hidden');
      }
    } catch (error) {
      errorDiv.textContent = 'Network error. Please try again.';
      errorDiv.classList.remove('hidden');
    }
  });
  
  // Handle delete buttons
  document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const button = e.currentTarget as HTMLElement;
      const categoryId = button.dataset.categoryId;
      const categoryName = button.dataset.categoryName;
      
      if (!categoryId) return;
      
      if (!confirm(`Are you sure you want to delete "${categoryName}"? Posts using this category will become uncategorized.`)) {
        return;
      }
      
      try {
        const response = await fetch(`${import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8752'}/api/categories/${categoryId}`, {
          method: 'DELETE',
          credentials: 'include',
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          const text = await response.text();
          alert(text || 'Failed to delete category');
        }
      } catch (error) {
        alert('Network error. Please try again.');
      }
    });
  });
</script>