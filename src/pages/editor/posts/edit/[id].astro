---
export const prerender = false;

import Layout from '../../../../layouts/Layout.astro';
import RichTextEditor from '../../../../components/editor/RichTextEditor';

// Check authentication
const token = Astro.cookies.get('auth-token');
if (!token) {
  return Astro.redirect('/editor/login');
}

const { id } = Astro.params;

// Fetch the post
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8749';
const postResponse = await fetch(`${API_URL}/api/posts/${id}`, {
  headers: {
    'Cookie': `auth-token=${token.value}`
  }
});

if (!postResponse.ok) {
  return Astro.redirect('/editor/posts');
}

const post = await postResponse.json();

// Fetch categories
const categoriesResponse = await fetch(`${API_URL}/api/categories?type=${post.type}`, {
  headers: {
    'Cookie': `auth-token=${token.value}`
  }
});
const categories = categoriesResponse.ok ? await categoriesResponse.json() : [];

// Check if saved
const saved = Astro.url.searchParams.get('saved') === 'true';
---

<Layout title={`Edit: ${post.title} - Editor`}>
  <div class="min-h-screen bg-gray-900">
    <!-- Editor Header -->
    <header class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4 py-4">
        <div class="flex justify-between items-center">
          <h1 class="text-xl font-bold text-white">Edit {post.type === 'blog' ? 'Blog Post' : 'Documentation'}</h1>
          <a href="/editor/posts" class="text-gray-400 hover:text-white">
            ← Back to Posts
          </a>
        </div>
      </div>
    </header>

    <main class="container mx-auto px-4 py-8 max-w-4xl">
      {saved && (
        <div class="mb-6 p-4 bg-green-900/20 border border-green-700 rounded-lg text-green-400">
          ✓ Post saved successfully
        </div>
      )}

      <form id="postForm" class="space-y-6">
        <input type="hidden" name="id" value={post.id} />
        <input type="hidden" name="type" value={post.type} />
        
        <!-- Title -->
        <div>
          <label for="title" class="block text-sm font-medium mb-2 text-gray-300">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            required
            value={post.title}
            class="w-full px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter post title"
          />
        </div>

        <!-- Slug -->
        <div>
          <label for="slug" class="block text-sm font-medium mb-2 text-gray-300">
            Slug (URL)
          </label>
          <input
            type="text"
            id="slug"
            name="slug"
            value={post.slug}
            class="w-full px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="post-url-slug"
          />
        </div>

        <!-- Description -->
        <div>
          <label for="description" class="block text-sm font-medium mb-2 text-gray-300">Description</label>
          <textarea
            id="description"
            name="description"
            required
            rows="3"
            class="w-full px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Brief description for listing pages"
          >{post.description}</textarea>
        </div>

        <!-- Category -->
        <div>
          <label for="category" class="block text-sm font-medium mb-2 text-gray-300">Category</label>
          <select
            id="category"
            name="category"
            required
            class="w-full px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select a category</option>
            {categories.map((cat: any) => (
              <option value={cat.id} selected={cat.id === post.category}>
                {cat.name}
              </option>
            ))}
          </select>
        </div>

        <!-- Cover Image -->
        <div>
          <label for="coverImage" class="block text-sm font-medium mb-2 text-gray-300">
            Cover Image URL
            <span class="text-gray-400 text-xs ml-2">Optional</span>
          </label>
          <input
            type="text"
            id="coverImage"
            name="coverImage"
            value={post.coverImage || ''}
            class="w-full px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="/uploads/cover-image.jpg"
          />
        </div>

        <!-- Content -->
        <div>
          <label class="block text-sm font-medium mb-2 text-gray-300">Content</label>
          <RichTextEditor 
            client:load
            content={post.content}
            onChange={(content) => {
              (document.getElementById('content') as HTMLInputElement).value = content;
            }}
            placeholder="Start writing your content..."
          />
          <input type="hidden" id="content" name="content" value={post.content} />
        </div>

        <!-- Publish Options -->
        <div class="flex items-center gap-4">
          <label class="flex items-center gap-2">
            <input
              type="checkbox"
              name="published"
              id="published"
              checked={post.published}
              class="rounded bg-gray-700 border-gray-600"
            />
            <span>Published</span>
          </label>
        </div>

        <!-- Actions -->
        <div class="flex gap-4">
          <button
            type="submit"
            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-md font-medium text-white transition-colors"
          >
            Save Changes
          </button>
          <a
            href={`/${post.type}/${post.slug}`}
            target="_blank"
            class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-md font-medium text-white transition-colors"
          >
            View Post
          </a>
          <a
            href="/editor/posts"
            class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-md font-medium text-white transition-colors"
          >
            Cancel
          </a>
        </div>

        <div id="error" class="text-red-400 hidden"></div>
      </form>
    </main>
  </div>

  <style>
    import '../../../../components/editor/editor-styles.css';
  </style>
</Layout>

<script>
  const form = document.getElementById('postForm') as HTMLFormElement;
  const errorDiv = document.getElementById('error') as HTMLDivElement;
  
  // Form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const postId = formData.get('id');
    const data = {
      title: formData.get('title'),
      slug: formData.get('slug'),
      description: formData.get('description'),
      content: formData.get('content'),
      type: formData.get('type'),
      category: formData.get('category'),
      coverImage: formData.get('coverImage') || undefined,
      published: formData.get('published') === 'on'
    };
    
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL || 'http://localhost:8749'}/api/posts/${postId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        // Reload the page with saved=true to show success message
        window.location.href = `/editor/posts/edit/${postId}?saved=true`;
      } else {
        const text = await response.text();
        errorDiv.textContent = text || 'Failed to update post';
        errorDiv.classList.remove('hidden');
      }
    } catch (error) {
      errorDiv.textContent = 'Network error. Please try again.';
      errorDiv.classList.remove('hidden');
    }
  });
</script>