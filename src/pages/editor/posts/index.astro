---
export const prerender = false;

import Layout from '../../../layouts/Layout.astro';

// Check authentication
const token = Astro.cookies.get('auth-token');
if (!token) {
  return Astro.redirect('/editor/login');
}

// Fetch posts
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8749';
const postsResponse = await fetch(`${API_URL}/api/posts`, {
  headers: {
    'Cookie': `auth-token=${token.value}`
  }
});
const postsData = postsResponse.ok ? await postsResponse.json() : null;
const posts = Array.isArray(postsData) ? postsData : [];

// Separate blog and docs
const blogPosts = posts.filter((p: any) => p.type === 'blog');
const docsPosts = posts.filter((p: any) => p.type === 'docs');
---

<Layout title="Posts - Editor">
  <div class="min-h-screen bg-gray-900">
    <!-- Editor Header -->
    <header class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4 py-4">
        <div class="flex justify-between items-center">
          <h1 class="text-xl font-bold text-white">Manage Posts</h1>
          <div class="flex gap-2">
            <a href="/editor/posts/new?type=blog" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-md text-sm">
              New Blog Post
            </a>
            <a href="/editor/posts/new?type=docs" class="px-4 py-2 bg-green-600 hover:bg-green-700 rounded-md text-sm">
              New Documentation
            </a>
          </div>
        </div>
      </div>
    </header>

    <!-- Editor Navigation -->
    <nav class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4">
        <div class="flex gap-6">
          <a href="/editor" class="py-3 border-b-2 border-transparent text-gray-400 hover:text-gray-300">Dashboard</a>
          <a href="/editor/posts" class="py-3 border-b-2 border-blue-500 text-blue-400">Posts</a>
          <a href="/editor/categories" class="py-3 border-b-2 border-transparent text-gray-400 hover:text-gray-300">Categories</a>
        </div>
      </div>
    </nav>

    <main class="container mx-auto px-4 py-8">
      <!-- Blog Posts Section -->
      <section class="mb-8">
        <h2 class="text-2xl font-bold mb-4 text-white">Blog Posts ({blogPosts.length})</h2>
        <div class="bg-gray-800 rounded-lg overflow-hidden">
          <table class="w-full">
            <thead class="bg-gray-700">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Title</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Category</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-700">
              {blogPosts.map((post: any) => (
                <tr class="hover:bg-gray-700">
                  <td class="px-6 py-4">
                    <a href={`/editor/posts/edit/${post.id}`} class="text-blue-400 hover:text-blue-300">
                      {post.title}
                    </a>
                  </td>
                  <td class="px-6 py-4 text-gray-400">
                    {post.category_data?.name || 'Uncategorized'}
                  </td>
                  <td class="px-6 py-4">
                    <span class={`px-2 py-1 text-xs rounded-full ${
                      post.published ? 'bg-green-900 text-green-300' : 'bg-yellow-900 text-yellow-300'
                    }`}>
                      {post.published ? 'Published' : 'Draft'}
                    </span>
                  </td>
                  <td class="px-6 py-4 text-gray-400">
                    {new Date(post.createdAt).toLocaleDateString()}
                  </td>
                  <td class="px-6 py-4 text-right">
                    <a href={`/blog/${post.slug}`} target="_blank" class="text-gray-400 hover:text-white mr-3">
                      View
                    </a>
                    <a href={`/editor/posts/edit/${post.id}`} class="text-blue-400 hover:text-blue-300 mr-3">
                      Edit
                    </a>
                    <button 
                      data-post-id={post.id}
                      class="delete-btn text-red-400 hover:text-red-300"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          {blogPosts.length === 0 && (
            <div class="text-center py-8 text-gray-400">
              No blog posts yet.
            </div>
          )}
        </div>
      </section>

      <!-- Documentation Section -->
      <section>
        <h2 class="text-2xl font-bold mb-4 text-white">Documentation ({docsPosts.length})</h2>
        <div class="bg-gray-800 rounded-lg overflow-hidden">
          <table class="w-full">
            <thead class="bg-gray-700">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Title</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Category</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-700">
              {docsPosts.map((post: any) => (
                <tr class="hover:bg-gray-700">
                  <td class="px-6 py-4">
                    <a href={`/editor/posts/edit/${post.id}`} class="text-blue-400 hover:text-blue-300">
                      {post.title}
                    </a>
                  </td>
                  <td class="px-6 py-4 text-gray-400">
                    {post.category_data?.name || 'Uncategorized'}
                  </td>
                  <td class="px-6 py-4">
                    <span class={`px-2 py-1 text-xs rounded-full ${
                      post.published ? 'bg-green-900 text-green-300' : 'bg-yellow-900 text-yellow-300'
                    }`}>
                      {post.published ? 'Published' : 'Draft'}
                    </span>
                  </td>
                  <td class="px-6 py-4 text-gray-400">
                    {new Date(post.createdAt).toLocaleDateString()}
                  </td>
                  <td class="px-6 py-4 text-right">
                    <a href={`/docs/${post.slug}`} target="_blank" class="text-gray-400 hover:text-white mr-3">
                      View
                    </a>
                    <a href={`/editor/posts/edit/${post.id}`} class="text-blue-400 hover:text-blue-300 mr-3">
                      Edit
                    </a>
                    <button 
                      data-post-id={post.id}
                      class="delete-btn text-red-400 hover:text-red-300"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          {docsPosts.length === 0 && (
            <div class="text-center py-8 text-gray-400">
              No documentation yet.
            </div>
          )}
        </div>
      </section>
    </main>
  </div>
</Layout>

<script>
  // Handle delete buttons
  document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const postId = (e.target as HTMLElement).dataset.postId;
      if (!postId) return;
      
      if (!confirm('Are you sure you want to delete this post?')) {
        return;
      }
      
      try {
        const response = await fetch(`${import.meta.env.PUBLIC_API_URL || 'http://localhost:8749'}/api/posts/${postId}`, {
          method: 'DELETE',
          credentials: 'include',
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Failed to delete post');
        }
      } catch (error) {
        alert('Network error. Please try again.');
      }
    });
  });
</script>