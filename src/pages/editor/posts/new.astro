---
export const prerender = false;

import Layout from '../../../layouts/Layout.astro';
import AstroRichTextEditor from '../../../components/editor/AstroRichTextEditor';

// Check authentication
const token = Astro.cookies.get('auth-token');
if (!token) {
  return Astro.redirect('/editor/login');
}

// Get post type from query params
const postType = Astro.url.searchParams.get('type') || 'blog';

// Fetch categories
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8749';
const categoriesResponse = await fetch(`${API_URL}/api/categories?type=${postType}`, {
  headers: {
    'Cookie': `auth-token=${token.value}`
  }
});
const categories = categoriesResponse.ok ? await categoriesResponse.json() : [];
---

<Layout title="New Post - Editor">
  <div class="min-h-screen bg-gray-900">
    <!-- Editor Header -->
    <header class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4 py-4">
        <div class="flex justify-between items-center">
          <h1 class="text-xl font-bold text-white">Create New {postType === 'blog' ? 'Blog Post' : 'Documentation'}</h1>
          <a href="/editor" class="text-gray-400 hover:text-white">
            ‚Üê Back to Dashboard
          </a>
        </div>
      </div>
    </header>

    <main class="container mx-auto px-4 py-8 max-w-4xl">
      <form id="postForm" class="space-y-6">
        <input type="hidden" name="type" value={postType} />
        
        <!-- Title -->
        <div>
          <label for="title" class="block text-sm font-medium mb-2 text-gray-300">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            required
            class="w-full px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter post title"
          />
        </div>

        <!-- Slug -->
        <div>
          <label for="slug" class="block text-sm font-medium mb-2 text-gray-300">
            Slug (URL)
            <span class="text-gray-400 text-xs ml-2">Leave empty to auto-generate</span>
          </label>
          <input
            type="text"
            id="slug"
            name="slug"
            class="w-full px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="post-url-slug"
          />
        </div>

        <!-- Description -->
        <div>
          <label for="description" class="block text-sm font-medium mb-2 text-gray-300">Description</label>
          <textarea
            id="description"
            name="description"
            required
            rows="3"
            class="w-full px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Brief description for listing pages"
          ></textarea>
        </div>

        <!-- Category -->
        <div>
          <label for="category" class="block text-sm font-medium mb-2 text-gray-300">Category</label>
          <select
            id="category"
            name="category"
            required
            class="w-full px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select a category</option>
            {categories.map((cat: any) => (
              <option value={cat.id}>{cat.name}</option>
            ))}
          </select>
        </div>

        <!-- Cover Image -->
        <div>
          <label for="coverImage" class="block text-sm font-medium mb-2 text-gray-300">
            Cover Image
            <span class="text-gray-400 text-xs ml-2">Optional</span>
          </label>
          <div class="flex gap-2">
            <input
              type="text"
              id="coverImage"
              name="coverImage"
              class="flex-1 px-3 py-2 bg-gray-800 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="/uploads/cover-image.jpg or click Upload to select"
            />
            <button
              type="button"
              id="uploadCoverBtn"
              class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-colors flex items-center gap-2"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
              </svg>
              <span id="uploadBtnText">Upload</span>
            </button>
          </div>
          <div id="coverPreview" class="mt-2 hidden">
            <img id="coverPreviewImg" class="max-w-xs rounded-md border border-gray-700" />
          </div>
        </div>

        <!-- Content -->
        <div>
          <label class="block text-sm font-medium mb-2 text-gray-300">Content</label>
          <AstroRichTextEditor 
            client:load
            content=""
            placeholder="Start writing your content..."
            inputId="content"
          />
          <input type="hidden" id="content" name="content" />
        </div>

        <!-- Publish Options -->
        <div class="flex items-center gap-4">
          <label class="flex items-center gap-2">
            <input
              type="checkbox"
              name="published"
              id="published"
              class="rounded bg-gray-700 border-gray-600"
            />
            <span class="text-gray-300">Publish immediately</span>
          </label>
        </div>

        <!-- Actions -->
        <div class="flex gap-4">
          <button
            type="submit"
            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-md font-medium text-white transition-colors"
          >
            Create Post
          </button>
          <a
            href="/editor"
            class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-md font-medium text-white transition-colors"
          >
            Cancel
          </a>
        </div>

        <div id="error" class="text-red-400 hidden"></div>
      </form>
    </main>
  </div>

</Layout>

<script>
  import '../../../components/editor/editor-styles.css';
  const form = document.getElementById('postForm') as HTMLFormElement;
  const errorDiv = document.getElementById('error') as HTMLDivElement;
  
  // Auto-generate slug from title
  const titleInput = document.getElementById('title') as HTMLInputElement;
  const slugInput = document.getElementById('slug') as HTMLInputElement;
  
  titleInput.addEventListener('input', () => {
    // Only auto-generate if user hasn't manually edited the slug
    if (!slugInput.dataset.manual) {
      const slug = titleInput.value
        .toLowerCase()
        .replace(/[^a-z0-9\s]+/g, '') // Remove special chars but keep spaces
        .replace(/\s+/g, '-')          // Replace spaces with hyphens
        .replace(/-+/g, '-')           // Replace multiple hyphens with single
        .replace(/^-+|-+$/g, '');      // Remove leading/trailing hyphens
      slugInput.value = slug;
    }
  });
  
  slugInput.addEventListener('input', () => {
    slugInput.dataset.manual = 'true';
  });
  
  // Cover image upload
  const uploadBtn = document.getElementById('uploadCoverBtn') as HTMLButtonElement;
  const coverImageInput = document.getElementById('coverImage') as HTMLInputElement;
  const coverPreview = document.getElementById('coverPreview') as HTMLDivElement;
  const coverPreviewImg = document.getElementById('coverPreviewImg') as HTMLImageElement;
  const uploadBtnText = document.getElementById('uploadBtnText') as HTMLSpanElement;
  
  uploadBtn.addEventListener('click', () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    
    input.onchange = async (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (!file) return;
      
      try {
        // Update button to show uploading state
        uploadBtn.disabled = true;
        uploadBtnText.textContent = 'Uploading...';
        
        const formData = new FormData();
        formData.append('file', file);
        
        // Upload using relative URL (nginx will proxy correctly)
        const response = await fetch('/api/upload', {
          method: 'POST',
          body: formData,
          credentials: 'include',
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('Upload failed:', response.status, errorText);
          let errorMessage = 'Failed to upload image';
          if (response.status === 401) {
            errorMessage = 'Authentication required. Please log in again.';
          } else if (response.status === 413) {
            errorMessage = 'Image file is too large (max 25MB)';
          }
          errorDiv.textContent = errorMessage;
          errorDiv.classList.remove('hidden');
          return;
        }
        
        const data = await response.json();
        if (data.url) {
          // Set the URL in the input field
          coverImageInput.value = data.url;
          
          // Show preview
          coverPreviewImg.src = data.url;
          coverPreview.classList.remove('hidden');
          
          // Clear any error
          errorDiv.classList.add('hidden');
        }
      } catch (error) {
        console.error('Upload error:', error);
        errorDiv.textContent = 'Failed to upload image. Please try again.';
        errorDiv.classList.remove('hidden');
      } finally {
        // Reset button state
        uploadBtn.disabled = false;
        uploadBtnText.textContent = 'Upload';
      }
    };
    
    input.click();
  });
  
  // Show preview if URL is manually entered
  coverImageInput.addEventListener('input', () => {
    const url = coverImageInput.value.trim();
    if (url) {
      coverPreviewImg.src = url;
      coverPreview.classList.remove('hidden');
    } else {
      coverPreview.classList.add('hidden');
    }
  });
  
  // Form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    
    // Get content from window object or hidden input
    let content = formData.get('content') || '';
    if (!content && typeof window !== 'undefined' && (window as any).__editorContent) {
      content = (window as any).__editorContent;
    }
    
    const data = {
      title: formData.get('title'),
      slug: formData.get('slug') || undefined,
      description: formData.get('description'),
      content: content,
      type: formData.get('type'),
      category: formData.get('category'),
      coverImage: formData.get('coverImage') || undefined,
      published: formData.get('published') === 'on'
    };
    
    
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL || 'http://localhost:8749'}/api/posts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        const post = await response.json();
        window.location.href = `/editor/posts/edit/${post.id}?saved=true`;
      } else {
        const text = await response.text();
        errorDiv.textContent = text || 'Failed to create post';
        errorDiv.classList.remove('hidden');
      }
    } catch (error) {
      errorDiv.textContent = 'Network error. Please try again.';
      errorDiv.classList.remove('hidden');
    }
  });
</script>