---
import { generateHTML } from '@tiptap/html';
import StarterKit from '@tiptap/starter-kit';
import Image from '@tiptap/extension-image';
import Link from '@tiptap/extension-link';
import CodeBlockLowlight from '@tiptap/extension-code-block-lowlight';
import { common, createLowlight } from 'lowlight';
import { marked } from 'marked';
import { markedHighlight } from 'marked-highlight';
import hljs from 'highlight.js/lib/core';
// Import GitHub Dark theme for syntax highlighting
import 'highlight.js/styles/github-dark.css';

// Import languages for syntax highlighting
import typescript from 'highlight.js/lib/languages/typescript';
import javascript from 'highlight.js/lib/languages/javascript';
import python from 'highlight.js/lib/languages/python';
import go from 'highlight.js/lib/languages/go';
import rust from 'highlight.js/lib/languages/rust';
import java from 'highlight.js/lib/languages/java';
import ruby from 'highlight.js/lib/languages/ruby';
import bash from 'highlight.js/lib/languages/bash';
import json from 'highlight.js/lib/languages/json';
import xml from 'highlight.js/lib/languages/xml';
import css from 'highlight.js/lib/languages/css';
import swift from 'highlight.js/lib/languages/swift';
import csharp from 'highlight.js/lib/languages/csharp';

// Register languages with highlight.js for marked
hljs.registerLanguage('typescript', typescript);
hljs.registerLanguage('javascript', javascript);
hljs.registerLanguage('python', python);
hljs.registerLanguage('go', go);
hljs.registerLanguage('rust', rust);
hljs.registerLanguage('java', java);
hljs.registerLanguage('ruby', ruby);
hljs.registerLanguage('bash', bash);
hljs.registerLanguage('json', json);
hljs.registerLanguage('xml', xml);
hljs.registerLanguage('html', xml);
hljs.registerLanguage('css', css);
hljs.registerLanguage('swift', swift);
hljs.registerLanguage('csharp', csharp);
hljs.registerLanguage('cs', csharp);
hljs.registerLanguage('ts', typescript);
hljs.registerLanguage('js', javascript);
hljs.registerLanguage('py', python);

// Configure marked with syntax highlighting
marked.use(markedHighlight({
  langPrefix: 'hljs language-',
  highlight(code, lang) {
    const language = hljs.getLanguage(lang) ? lang : 'plaintext';
    return hljs.highlight(code, { language }).value;
  }
}));

// Create lowlight instance for TipTap
const lowlight = createLowlight(common);
lowlight.register('typescript', typescript);
lowlight.register('javascript', javascript);
lowlight.register('python', python);
lowlight.register('ruby', ruby);
lowlight.register('go', go);
lowlight.register('rust', rust);
lowlight.register('java', java);
lowlight.register('bash', bash);
lowlight.register('json', json);
lowlight.register('html', xml);
lowlight.register('css', css);
lowlight.register('swift', swift);

export interface Props {
  post: {
    id: string;
    title: string;
    content: string;
    category_data?: { name: string; slug: string } | null;
    coverImage?: string;
    author_data: {
      name: string;
      email: string;
    } | null;
    readingTime: number;
    createdAt: string;
  };
}

const { post } = Astro.props;

// Function to render content
function renderContent(content: string): string {
  const trimmedContent = content.trim();
  
  // Check if it's TipTap JSON
  if (trimmedContent.startsWith('{') && trimmedContent.includes('"type"')) {
    try {
      const jsonContent = JSON.parse(trimmedContent);
      
      // Configure TipTap extensions
      const extensions = [
        StarterKit.configure({
          codeBlock: false, // We'll use CodeBlockLowlight instead
        }),
        Image,
        Link,
        CodeBlockLowlight.configure({
          lowlight,
          defaultLanguage: 'auto',
          HTMLAttributes: {
            class: 'hljs',
          },
        }),
      ];
      
      // Generate HTML from TipTap JSON
      let html = generateHTML(jsonContent, extensions);
      
      // Post-process to add syntax highlighting
      // Find all code blocks and highlight them - match what TipTap actually generates
      html = html.replace(/<pre[^>]*><code[^>]*>([\s\S]*?)<\/code><\/pre>/g, (match, code) => {
        // Decode HTML entities
        const decodedCode = code
          .replace(/&lt;/g, '<')
          .replace(/&gt;/g, '>')
          .replace(/&amp;/g, '&')
          .replace(/&quot;/g, '"')
          .replace(/&#39;/g, "'");
        
        try {
          // Auto-detect language since it's not in the attributes
          const result = hljs.highlightAuto(decodedCode);
          const language = result.language || 'plaintext';
          return `<pre class="hljs"><code class="language-${language}">${result.value}</code></pre>`;
        } catch (e) {
          console.error('Highlighting error:', e);
          // If highlighting fails, return with basic styling
          return `<pre class="hljs"><code>${code}</code></pre>`;
        }
      });
      
      return html;
    } catch (e) {
      console.error('Failed to parse TipTap JSON:', e);
      // Fallback to markdown
      return marked(content);
    }
  } else {
    // It's markdown content
    return marked(content);
  }
}

const contentHtml = renderContent(post.content);
---

<div class="w-full max-w-none mx-auto px-4 py-8">
  <div class="lg:grid lg:grid-cols-4 lg:gap-8">
    <article class="col-span-3 min-w-0 w-full">
      {post.coverImage && (
        <div class="relative h-[400px] mb-8 rounded-xl overflow-hidden">
          <img
            src={post.coverImage}
            alt={post.title}
            class="w-full h-full object-cover hover:scale-105 transition-transform duration-200"
          />
        </div>
      )}

      <header class="mb-8">
        <div class="flex items-center gap-2 text-blog-text-secondary text-sm mb-2">
          <span>{post.category_data?.name || 'Uncategorized'}</span>
          <span>•</span>
          <span>{new Date(post.createdAt).toLocaleDateString()}</span>
          <span>•</span>
          <span>{post.readingTime} min read</span>
        </div>

        <h1 class="text-4xl font-bold mb-4 text-blog-text-primary">{post.title}</h1>
        
        <div class="flex items-center gap-3">
          <div class="w-10 h-10 rounded-full bg-blog-author-avatar-bg text-blog-author-avatar-text flex items-center justify-center">
            {post.author_data?.name?.[0]?.toUpperCase() || 'A'}
          </div>
          <div>
            <div class="font-medium text-blog-text-primary">{post.author_data?.name || 'Anonymous'}</div>
            <div class="text-sm text-blog-text-muted">{post.author_data?.email || ''}</div>
          </div>
        </div>
      </header>

      <div class="prose prose-invert max-w-none" set:html={contentHtml} />
    </article>

    <!-- Table of Contents Sidebar could go here if needed -->
  </div>
</div>

<style is:global>
  /* Import highlight.js styles */
  @import 'highlight.js/styles/github-dark.css';
  
  /* Prose styles for proper formatting */
  .prose {
    color: var(--tw-prose-body);
    max-width: 65ch;
  }
  
  .prose h1 {
    @apply text-3xl font-bold mb-4 text-white;
  }
  
  .prose h2 {
    @apply text-2xl font-bold mb-3 text-white;
  }
  
  .prose h3 {
    @apply text-xl font-bold mb-2 text-white;
  }
  
  .prose p {
    @apply mb-4;
  }
  
  .prose pre {
    @apply bg-[#0d1117] rounded-lg p-4 overflow-x-auto mb-4;
  }
  
  .prose pre code {
    @apply text-sm;
  }
  
  .prose code {
    @apply bg-gray-800 px-1 py-0.5 rounded text-sm;
  }
  
  .prose a {
    @apply text-blue-400 hover:text-blue-300 underline;
  }
  
  .prose blockquote {
    @apply border-l-4 border-gray-600 pl-4 my-4 italic text-gray-400;
  }
  
  .prose ul {
    @apply list-disc list-inside mb-4 ml-4;
  }
  
  .prose ol {
    @apply list-decimal list-inside mb-4 ml-4;
  }
  
  .prose li {
    @apply mb-1;
  }
  
  .prose img {
    @apply max-w-full rounded-lg my-4;
  }
</style>