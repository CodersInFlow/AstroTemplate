---
export const prerender = false;

import '../../../../styles/global.css';
import Layout from '../../../../layouts/Layout.astro';

// Check authentication
const token = Astro.cookies.get('auth-token');
if (!token) {
  return Astro.redirect('/blog/editor/login');
}

// Check if user is admin
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8752';
const userResponse = await fetch(`${API_URL}/api/auth/me`, {
  headers: {
    'Cookie': `auth-token=${token.value}`
  }
});

if (!userResponse.ok) {
  return Astro.redirect('/blog/editor/login');
}

const currentUser = await userResponse.json();
if (currentUser.role !== 'admin') {
  return Astro.redirect('/blog/editor');
}
---

<Layout title="Create User - Editor">
  <div class="min-h-screen bg-gray-900">
    <!-- Editor Header -->
    <header class="bg-gray-800 border-b border-gray-700">
      <div class="container mx-auto px-4 py-4">
        <div class="flex justify-between items-center">
          <h1 class="text-xl font-bold text-white">Create New User</h1>
          <a href="/blog/editor/users" class="text-gray-400 hover:text-white">
            ‚Üê Back to Users
          </a>
        </div>
      </div>
    </header>

    <main class="container mx-auto px-4 py-8 max-w-md">
      <div class="bg-gray-800 rounded-lg p-6">
        <form id="createUserForm">
          <div class="mb-4">
            <label for="name" class="block text-sm font-medium text-gray-300 mb-2">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              required
              class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div class="mb-4">
            <label for="email" class="block text-sm font-medium text-gray-300 mb-2">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              required
              class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div class="mb-4">
            <label for="password" class="block text-sm font-medium text-gray-300 mb-2">
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              required
              minlength="8"
              class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <p class="mt-1 text-sm text-gray-400">Must be at least 8 characters</p>
          </div>

          <div class="mb-6">
            <label for="role" class="block text-sm font-medium text-gray-300 mb-2">
              Role
            </label>
            <select
              id="role"
              name="role"
              required
              class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
          </div>

          <div id="errorMessage" class="mb-4 text-red-400 text-sm hidden"></div>
          <div id="successMessage" class="mb-4 text-green-400 text-sm hidden"></div>

          <button
            type="submit"
            class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors"
          >
            Create User
          </button>
        </form>
      </div>
    </main>
  </div>
</Layout>

<script>
  const form = document.getElementById('createUserForm') as HTMLFormElement;
  const errorMessage = document.getElementById('errorMessage');
  const successMessage = document.getElementById('successMessage');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Hide messages
    errorMessage?.classList.add('hidden');
    successMessage?.classList.add('hidden');

    // Get form data
    const formData = new FormData(form);
    const name = formData.get('name') as string;
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    const role = formData.get('role') as string;

    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8752'}/api/admin/users`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          name,
          email,
          password,
          role,
        }),
      });

      if (!response.ok) {
        const text = await response.text();
        throw new Error(text || 'Failed to create user');
      }

      // Show success message
      if (successMessage) {
        successMessage.textContent = 'User created successfully!';
        successMessage.classList.remove('hidden');
      }

      // Clear form
      form.reset();

      // Redirect after a short delay
      setTimeout(() => {
        window.location.href = '/blog/editor/users';
      }, 2000);
    } catch (error) {
      if (errorMessage) {
        errorMessage.textContent = error instanceof Error ? error.message : 'Failed to create user';
        errorMessage.classList.remove('hidden');
      }
    }
  });
</script>